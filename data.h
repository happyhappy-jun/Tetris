//
// Created by Yoon Jun on 2020/05/09.
//

#ifndef ASSN3_1_DATA_H
#define ASSN3_1_DATA_H
#define BLOCK_SIZE 4*4*sizeof(int)

//https://tetris.wiki/Super_Rotation_System
namespace RotationState {
    const int IRotationState[4][4][4] = {
            {{0, 0, 0, 0}, {1, 1, 1, 1}, {0, 0, 0, 0}, {0, 0, 0, 0}},
            {{0, 0, 1, 0}, {0, 0, 1, 0}, {0, 0, 1, 0}, {0, 0, 1, 0}},
            {{0, 0, 0, 0}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 0, 0, 0}},
            {{0, 1, 0, 0}, {0, 1, 0, 0}, {0, 1, 0, 0}, {0, 1, 0, 0}}
    };
    const int JRotationState[4][4][4] = {
            {{0, 0, 0, 0}, {1, 0, 0, 0}, {1, 1, 1, 0}, {0, 0, 0, 0}},
            {{0, 0, 0, 0}, {0, 1, 1, 0}, {0, 1, 0, 0}, {0, 1, 0, 0}},
            {{0, 0, 0, 0}, {0, 0, 0, 0}, {1, 1, 1, 0}, {0, 0, 1, 0}},
            {{0, 0, 0, 0}, {0, 1, 0, 0}, {0, 1, 0, 0}, {1, 1, 0, 0}}
    };
    const int LRotationState[4][4][4] = {
            {{0, 0, 0, 0}, {0, 0, 1, 0}, {1, 1, 1, 0}, {0, 0, 0, 0}},
            {{0, 0, 0, 0}, {0, 1, 0, 0}, {0, 1, 0, 0}, {0, 1, 1, 0}},
            {{0, 0, 0, 0}, {0, 0, 0, 0}, {1, 1, 1, 0}, {1, 0, 0, 0}},
            {{0, 0, 0, 0}, {1, 1, 0, 0}, {0, 1, 0, 0}, {0, 1, 0, 0}}
    };
    const int ORotationState[4][4][4] = {
            {{0, 0, 0, 0}, {0, 1, 1, 0}, {0, 1, 1, 0}, {0, 0, 0, 0}},
            {{0, 0, 0, 0}, {0, 1, 1, 0}, {0, 1, 1, 0}, {0, 0, 0, 0}},
            {{0, 0, 0, 0}, {0, 1, 1, 0}, {0, 1, 1, 0}, {0, 0, 0, 0}},
            {{0, 0, 0, 0}, {0, 1, 1, 0}, {0, 1, 1, 0}, {0, 0, 0, 0}}
    };
    const int SRotationState[4][4][4] = {
            {{0, 0, 0, 0}, {0, 1, 1, 0}, {1, 1, 0, 0}, {0, 0, 0, 0}},
            {{0, 0, 0, 0}, {0, 1, 0, 0}, {0, 1, 1, 0}, {0, 0, 1, 0}},
            {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 1, 1, 0}, {1, 1, 0, 0}},
            {{0, 0, 0, 0}, {1, 0, 0, 0}, {1, 1, 0, 0}, {0, 1, 0, 0}}
    };
    const int TRotationState[4][4][4] = {
            {{0, 0, 0, 0}, {0, 1, 0, 0}, {1, 1, 1, 0}, {0, 0, 0, 0}},
            {{0, 0, 0, 0}, {0, 1, 0, 0}, {0, 1, 1, 0}, {0, 1, 0, 0}},
            {{0, 0, 0, 0}, {0, 0, 0, 0}, {1, 1, 1, 0}, {0, 1, 0, 0}},
            {{0, 0, 0, 0}, {0, 1, 0, 0}, {1, 1, 0, 0}, {0, 1, 0, 0}}
    };
    const int ZRotationState[4][4][4] = {
            {{0, 0, 0, 0}, {1, 1, 0, 0}, {0, 1, 1, 0}, {0, 0, 0, 0}},
            {{0, 0, 0, 0}, {0, 0, 1, 0}, {0, 1, 1, 0}, {0, 1, 0, 0}},
            {{0, 0, 0, 0}, {0, 0, 0, 0}, {1, 1, 0, 0}, {0, 1, 1, 0}},
            {{0, 0, 0, 0}, {0, 1, 0, 0}, {1, 1, 0, 0}, {1, 0, 0, 0}}
    };
}

namespace SRSTest{
    const int WallKickDataJLSTZ[8][5][2] = {
            {{0, 0}, {-1, 0}, {-1, -1}, {0, +2}, {-1, +2}}, // 0->R S0
            {{0, 0}, {+1, 0}, {+1, +1}, {0, -2}, {+1, -2}}, // R->0 S1
            {{0, 0}, {+1, 0}, {+1, +1}, {0, -2}, {+1, -2}}, // R->2 S2
            {{0, 0}, {-1, 0}, {-1, -1}, {0, +2}, {-1, +2}}, // 2->R S3
            {{0, 0}, {+1, 0}, {+1, -1}, {0, +2}, {+1, +2}}, // 2->L S4
            {{0, 0}, {-1, 0}, {-1, +1}, {0, -2}, {-1, -2}}, // L->2 S5
            {{0, 0}, {-1, 0}, {-1, +1}, {0, -2}, {-1, -2}}, // L->0 S6
            {{0, 0}, {+1, 0}, {+1, -1}, {0, +2}, {+1, +2}}  // 0->L S7
    };
    const int WallKickDataI[8][5][2] = {
            {{0, 0}, {-2, 0}, {+1, 0}, {-2, +1}, {+1, -2}}, // 0->R S0
            {{0, 0}, {+2, 0}, {-1, 0}, {+2, -1}, {-1, +2}}, // R->0 S1
            {{0, 0}, {-1, 0}, {+2, 0}, {-1, -2}, {+2, +1}}, // R->2 S2
            {{0, 0}, {+1, 0}, {-2, 0}, {+1, +2}, {-2, -1}}, // 2->R S3
            {{0, 0}, {+2, 0}, {-1, 0}, {+2, -1}, {-1, +2}}, // 2->L S4
            {{0, 0}, {-2, 0}, {+1, 0}, {-2, +1}, {+1, -2}}, // L->2 S5
            {{0, 0}, {+1, 0}, {-2, 0}, {+1, +2}, {-2, -1}}, // L->0 S6
            {{0, 0}, {-1, 0}, {+2, 0}, {-1, -2}, {+2, +1}}  // 0->L S7
    };
}

namespace TSpinTest{
    const int TSpinCorner = 2;
    const int TspinMiniCorner = 3;
    const int TSpinMatrix[4][3][3] = {
            {{2,1,2},{1,1,1},{3,0,3}},
            {{3,1,2},{0,1,1},{3,1,2}},
            {{3,0,3},{1,1,1},{2,1,1}},
            {{2,1,3},{1,1,0},{2,1,3}}
    };
}
#endif //ASSN3_1_DATA_H
